<!-- views/patientDashboard -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel='stylesheet', href='/stylesheets/style.css'>
  <title> patient dashboard</title>
  <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places&callback=initMap" async defer></script>
</head>
  <body>
    <main>
      <div class="users_wrapper">

        <!--users top section -->
        <div id="users_top" class="top">
          <b>PATIENT DASHBOARD</b>
          <header><%- include ('partials/header.ejs') %></header>
        </div>

        <!-- users left section -->
        <div id="users_left">
          <a href="/patients/userAppointment">Appointments</a><br><br>
          <a href="/patients/patientProfile">Profile</a><br><br>
          <a href="/#">Report</a><br><br><br>
          <!-- Logout Link -->
          <a href="/patients/logout">Logout</a>
        </div>

        <!-- users container -->
        <div id="users_container">

          <!-- Location search btn-->
          <button id="locationBtn" style=" float: right; margin-right: 5rem;">Health Centers Near You</button><span id="locationBarClose" style="color: rgb(248, 139, 139); float: right; margin-right: 5rem; display: none; font-weight: 900; font-size: 32px;">&times;</span>

          <!-- Users detailsS -->
          <div>
            <h1>Welcome <%= user.firstName %> </h1>
          </div>
          
          <!-- Google Map Section -->
          <div id="mapContainer">
              <input id="pac-input" type="text" placeholder="Search for health centers...">
              <div id="map"></div>
          </div>

          <!-- Users header -->
          <div class="cHeader">
            <!-- <a id="viewProviders" href="/patients/verified_providers">Appointments View Providers</a>
            <a id="viewAppointmentBtn" href="/patients/userAppointment">Appointments</a> -->
          </div>

          <!-- Dashboard Views -->
          <div class="dViews" id="dv">
              <a class="dViewsList">
                  <h3>Pending Appointments</h3>
                  <p>2222222</p>
              </a>
              <a class="dViewsList">
                  <h3>Cancelled Appointments</h3>
                  <p>1111111</p>
              </a>
              <a class="dViewsList">
                  <h3>Accepted Appointments</h3>
                  <p>555555555</p>
              </a>
              <a class="dViewsList">
                  <h3>Your Providers</h3>
                  <p>999999999</p>
              </a>
              <a class="dViewsList">
                  <h3>Providers Online </h3>
                  <p>55578908</p>
              </a>
              <a class="dViewsList">
                  <h3>Recommendations</h3>
                  <p>2222222</p>
              </a>
          </div>

          <!-- Live Chat Section -->
          <div style="display: none;">
            <h2>Live Chat with Providers</h2>
            <div id="chat-container">
              <div id="chat-messages" style="height: 200px; overflow-y: auto; margin-bottom: 10px; border: 1px solid #ccc; padding: 10px; border-radius: 5px;"></div>
              <input type="text" id="chat-input" placeholder="Type your message..." style="width: 80%; padding: 8px; margin-right: 10px;">
              <button id="chat-send" style="padding: 8px 15px;">Send</button>
            </div>
          </div>

        </div>

        <!-- users footer -->
        <div id="users_footer"><%- include ('partials/footer.ejs') %></div>

      </div>
    </main>

    <!-- Location map toggle -->
    <script>
      document.getElementById("locationBtn").addEventListener("click", function() {
        document.getElementById("mapContainer").style.display = "block";
        document.getElementById("locationBtn").style.display = "none";
        document.getElementById("locationBarClose").style.display = "block";
      });

      document.getElementById("locationBarClose").addEventListener("click", function() {
        document.getElementById("locationBarClose").style.display = "none";
        document.getElementById("locationBtn").style.display = "block";
        document.getElementById("mapContainer").style.display = "none";
      });

    </script>

    <!-- Initialize the map -->
    <script>
      function initMap() {
        const map = new google.maps.Map(document.getElementById("map"), {
          center: { lat: 6.465422, lng: 3.406448 }, // Default to Nigeria
          zoom: 12,
        });

        // Create the search box and link it to the UI element.
        const input = document.getElementById("pac-input");
        const searchBox = new google.maps.places.SearchBox(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener("bounds_changed", () => {
          searchBox.setBounds(map.getBounds());
        });

        // Listen for the event fired when the user selects a prediction
        searchBox.addListener("places_changed", () => {
          const places = searchBox.getPlaces();
          if (places.length === 0) return;

          // Clear out the old markers.
          markers.forEach((marker) => {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          const bounds = new google.maps.LatLngBounds();
          places.forEach((place) => {
            if (!place.geometry || !place.geometry.location) return;

            // Create a marker for each place.
            markers.push(
              new google.maps.Marker({
                map,
                title: place.name,
                position: place.geometry.location,
              })
            );

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
      }
    </script>

    <script>
    // Initialize Socket.io connection
    const socket = io();

    // DOM elements
    const chatMessages = document.getElementById('chat-messages');
    const chatInput = document.getElementById('chat-input');
    const chatSend = document.getElementById('chat-send');

    // Send message
    chatSend.addEventListener('click', () => {
      const message = chatInput.value.trim();
      if (message) {
        // Emit the message to the server
        socket.emit('patientMessage', {
          message: message,
          userId: <%= user.id %>,
          userName: '<%= user.firstName %>'
        });
        chatInput.value = '';
      }
    });

    // Listen for provider messages
    socket.on('providerMessage', (data) => {
      const messageElement = document.createElement('div');
      messageElement.innerHTML = `<strong>[Provider ${data.userName}]:</strong> ${data.message}`;
      chatMessages.appendChild(messageElement);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    });

    // Listen for your own messages (echoed back from the server)
    socket.on('patientMessage', (data) => {
      const messageElement = document.createElement('div');
      messageElement.innerHTML = `<strong>[You]:</strong> ${data.message}`;
      chatMessages.appendChild(messageElement);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    });
    </script>
    


    <!-- Initialize the Chat -->
    <!-- <script>
      const socket = io();
      const chatMessages = document.getElementById('chat-messages');
      const chatInput = document.getElementById('chat-input');
      const chatSend = document.getElementById('chat-send');

      // Send message
      chatSend.addEventListener('click', () => {
        const message = chatInput.value.trim();
        if (message) {
          socket.emit('patientMessage', { message, userId: <%= user.id %> });
          chatInput.value = '';
        }
      });

      // Receive message
      socket.on('providerMessage', (data) => {
        const messageElement = document.createElement('div');
        messageElement.textContent = `[Provider]: ${data.message}`;
        chatMessages.appendChild(messageElement);
        chatMessages.scrollTop = chatMessages.scrollHeight;
      });

      // Receive your own message
      socket.on('patientMessage', (data) => {
        const messageElement = document.createElement('div');
        messageElement.textContent = `[You]: ${data.message}`;
        chatMessages.appendChild(messageElement);
        chatMessages.scrollTop = chatMessages.scrollHeight;
      });
    </script> -->

    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>


  </body>

</html>