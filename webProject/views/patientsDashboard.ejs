<!-- views/patientDashboard -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel='stylesheet', href='/stylesheets/style.css'>
  <title> patient dashboard</title>
  <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places&callback=initMap" async defer></script>
  <style>
    #map {
      height: 200px;
      width: 100%;
      margin: 20px 0;
    }
    #pac-input {
      background-color: #fff;
      font-family: Roboto;
      font-size: 15px;
      font-weight: 300;
      margin-left: 12px;
      padding: 0 11px 0 13px;
      text-overflow: ellipsis;
      width: 400px;
      height: 40px;
      margin-bottom: 10px;
    }
  </style>
</head>
  <body>
    <main>
      <div class="users_wrapper">

        <!--users top section -->
        <div id="users_top">
          <b>PATIENT DASHBOARD</b>
          <header><%- include ('partials/header.ejs') %></header>
        </div>

        <!-- users left section -->
        <div id="users_left">
          <a href="/">Home</a><br>
          <span class="profile-link" onclick="openProfileModal()">Profile</span><br>
          <a href="/">Report</a><br>
          <!-- Logout Link -->
          <a href="/patients/logout">Logout</a>
        </div>

        <!-- users container -->
        <div id="users_container">
          <!-- Users detailsS -->
          <div>
            <h1>Welcome <%= user.firstName %> </h1>
          </div>

          <!-- Users header -->
          <div>
            <button id="viewProviders">View Providers</button>
            <button id="viewAppointmentBtn">View Appointments</button>
          </div>

          <div style="display: none;">
  <!-- Search Input -->
  <h2>View all providers</h2>
  <input type="text" id="searchInput" placeholder="Search by name or specialty..." title="Type in a name or specialty">

  <!-- Appointments Table -->
  <table border="2" id="providersTable">
      <thead>
          <tr>
              <th>Provider Name</th>
              <th>Specialty</th>
          </tr>
      </thead>
      <tbody>
          <% providers.forEach(provider => { %>
          <tr>
              <td><%= provider.first_name %> <%= provider.last_name %></td>
              <td><%= provider.specialty %></td>
              <td>
                <form action="">
                  <button>book Appointment</button>
                </form>
              </td>
          </tr>
          <% }); %>
      </tbody>
  </table>
          </div>

          <!-- Providers list -->
          <ul id="providersList">
    <span class="editClose" id="viewProvidersClose">&times;</span>
    <h2>Available Providers</h2>
    <% if (typeof providers !== 'undefined' && providers.length) { %>
      <% providers.forEach(provider => { %>
        <li>
          <%= provider.first_name %> <%= provider.last_name %>
          <form action="/patients/book" method="POST">
            <input type="hidden" name="providerId" value="<%= provider.provider_id %>">
            <input type="date" name="date" required>
            <input type="time" name="time" required>
            <button type="submit">Request Appointment</button>
          </form>
        </li>
      <% }); %>
    <% } else { %>
      <li>No providers available.</li>
    <% } %>
          </ul>

          <!-- View Appointments -->
          <ul id="viewAppointments">
      <span class="editClose" id="viewAppointmentClose">&times;</span>
      <h3>Your Appointments</h3>
      <% if (typeof appointments !== 'undefined' && appointments.length) { %>
        <% appointments.forEach(appointment => { %>
          <li>
            <p>
              <strong>Provider:</strong> <%= appointment.provider_first_name %> <%= appointment.provider_last_name %><br>
              <strong>Date:</strong> <%= appointment.appointment_date %><br>
              <strong>Time:</strong> <%= appointment.appointment_time %><br>
              <strong>Status:</strong> <%= appointment.status %>
            </p>
          </li>
        <% }); %>
      <% } else { %>
        <li>No appointments found.</li>
      <% } %>
          </ul>

          <!-- Google Map Section -->
          <div style="display: none;">
            <h2>Find Health Centers Near You</h2>
            <input id="pac-input" type="text" placeholder="Search for health centers...">
            <div id="map"></div>
          </div>

          <!-- Live Chat Section -->
          <div style="display: none;">
            <h2>Live Chat with Providers</h2>
            <div id="chat-container">
              <div id="chat-messages" style="height: 200px; overflow-y: auto; margin-bottom: 10px; border: 1px solid #ccc; padding: 10px; border-radius: 5px;"></div>
              <input type="text" id="chat-input" placeholder="Type your message..." style="width: 80%; padding: 8px; margin-right: 10px;">
              <button id="chat-send" style="padding: 8px 15px;">Send</button>
            </div>
          </div>

        </div>

        <!-- users footer -->
        <div id="users_footer"><%- include ('partials/footer.ejs') %></div>

      </div>
    </main>

    <!-- Initialize the map -->
    <script>
      function initMap() {
        const map = new google.maps.Map(document.getElementById("map"), {
          center: { lat: 6.465422, lng: 3.406448 }, // Default to Nigeria
          zoom: 12,
        });

        // Create the search box and link it to the UI element.
        const input = document.getElementById("pac-input");
        const searchBox = new google.maps.places.SearchBox(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener("bounds_changed", () => {
          searchBox.setBounds(map.getBounds());
        });

        // Listen for the event fired when the user selects a prediction
        searchBox.addListener("places_changed", () => {
          const places = searchBox.getPlaces();
          if (places.length === 0) return;

          // Clear out the old markers.
          markers.forEach((marker) => {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          const bounds = new google.maps.LatLngBounds();
          places.forEach((place) => {
            if (!place.geometry || !place.geometry.location) return;

            // Create a marker for each place.
            markers.push(
              new google.maps.Marker({
                map,
                title: place.name,
                position: place.geometry.location,
              })
            );

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
      }
    </script>

    <script>
    // Initialize Socket.io connection
    const socket = io();

    // DOM elements
    const chatMessages = document.getElementById('chat-messages');
    const chatInput = document.getElementById('chat-input');
    const chatSend = document.getElementById('chat-send');

    // Send message
    chatSend.addEventListener('click', () => {
      const message = chatInput.value.trim();
      if (message) {
        // Emit the message to the server
        socket.emit('patientMessage', {
          message: message,
          userId: <%= user.id %>,
          userName: '<%= user.firstName %>'
        });
        chatInput.value = '';
      }
    });

    // Listen for provider messages
    socket.on('providerMessage', (data) => {
      const messageElement = document.createElement('div');
      messageElement.innerHTML = `<strong>[Provider ${data.userName}]:</strong> ${data.message}`;
      chatMessages.appendChild(messageElement);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    });

    // Listen for your own messages (echoed back from the server)
    socket.on('patientMessage', (data) => {
      const messageElement = document.createElement('div');
      messageElement.innerHTML = `<strong>[You]:</strong> ${data.message}`;
      chatMessages.appendChild(messageElement);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    });
    </script>

    <script>
        document.getElementById('searchInput').addEventListener('keyup', function() {
            const input = this.value.toLowerCase();
            const rows = document.querySelectorAll('#providersTable tbody tr');

            rows.forEach(row => {
                const name = row.cells[0].textContent.toLowerCase();
                const specialty = row.cells[1].textContent.toLowerCase();

                if (name.includes(input) || specialty.includes(input)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        });
    </script>


    <!-- Appointments scripts -->
    <script>
      document.getElementById("viewAppointmentBtn").addEventListener("click", function() {
        document.getElementById("viewAppointments").style.display = "block";
      });

      document.getElementById("viewAppointmentClose").addEventListener("click", function() {
        document.getElementById("viewAppointments").style.display = "none";
      });

      document.getElementById("viewProviders").addEventListener("click", function() {
        document.getElementById("providersList").style.display = "block";
      });

      document.getElementById("viewProvidersClose").addEventListener("click", function() {
        document.getElementById("providersList").style.display = "none";
      });
    </script>



    <!-- Initialize the Chat -->
    <!-- <script>
      const socket = io();
      const chatMessages = document.getElementById('chat-messages');
      const chatInput = document.getElementById('chat-input');
      const chatSend = document.getElementById('chat-send');

      // Send message
      chatSend.addEventListener('click', () => {
        const message = chatInput.value.trim();
        if (message) {
          socket.emit('patientMessage', { message, userId: <%= user.id %> });
          chatInput.value = '';
        }
      });

      // Receive message
      socket.on('providerMessage', (data) => {
        const messageElement = document.createElement('div');
        messageElement.textContent = `[Provider]: ${data.message}`;
        chatMessages.appendChild(messageElement);
        chatMessages.scrollTop = chatMessages.scrollHeight;
      });

      // Receive your own message
      socket.on('patientMessage', (data) => {
        const messageElement = document.createElement('div');
        messageElement.textContent = `[You]: ${data.message}`;
        chatMessages.appendChild(messageElement);
        chatMessages.scrollTop = chatMessages.scrollHeight;
      });
    </script> -->

    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>


  </body>

</html>